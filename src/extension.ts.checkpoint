import * as vscode from 'vscode';

// Interface for template tool parameters
export interface ITemplateToolParameters {
    ait: string;
    spk: string;
    repo: string;
    applicationName: string;
    projectName: string;
    clusterURL: string;
    serviceID: string;
    servicePassword: string;
}

// Interface for dynamic template tool parameters
export interface IDynamicTemplateToolParameters {
    // No parameters needed - tool will prompt for everything
}

// Template Tool
class TemplateTool implements vscode.LanguageModelTool<ITemplateToolParameters> {
    async prepareInvocation(
        options: vscode.LanguageModelToolInvocationPrepareOptions<ITemplateToolParameters>,
        _token: vscode.CancellationToken
    ) {
        const params = options.input;
        
        const confirmationMessages = {
            title: 'Process Template Request',
            message: new vscode.MarkdownString(
                `Process template with the following parameters?\n\n` +
                `- **AIT**: ${params.ait}\n` +
                `- **SPK**: ${params.spk}\n` +
                `- **Repository**: ${params.repo}\n` +
                `- **Application Name**: ${params.applicationName}\n` +
                `- **Project Name**: ${params.projectName}\n` +
                `- **Cluster URL**: ${params.clusterURL}\n` +
                `- **Service ID**: ${params.serviceID}\n` +
                `- **Service Password**: ***`
            ),
        };

        return {
            invocationMessage: `Processing template with provided parameters`,
            confirmationMessages,
        };
    }

    async invoke(
        options: vscode.LanguageModelToolInvocationOptions<ITemplateToolParameters>,
        _token: vscode.CancellationToken
    ): Promise<vscode.LanguageModelToolResult> {
        const params = options.input;

        // Parse parameters if they contain the parameter names
        let ait = params.ait;
        let spk = params.spk;
        let repo = params.repo;
        let applicationName = params.applicationName;
        let projectName = params.projectName;
        let clusterURL = params.clusterURL;
        let serviceID = params.serviceID;
        let servicePassword = params.servicePassword;

        // Clean up parameters if they contain the parameter names
        if (ait && ait.startsWith('ait-')) {
            ait = ait.substring(4); // Remove 'ait-' prefix
        }
        if (spk && spk.startsWith('spk-')) {
            spk = spk.substring(4); // Remove 'spk-' prefix
        }
        if (repo && repo.startsWith('reponame-')) {
            repo = repo.substring(9); // Remove 'reponame-' prefix
        }
        if (applicationName && applicationName.startsWith('applicationName-')) {
            applicationName = applicationName.substring(17); // Remove 'applicationName-' prefix
        }
        if (projectName && projectName.startsWith('projectName-')) {
            projectName = projectName.substring(13); // Remove 'projectName-' prefix
        }
        if (clusterURL && clusterURL.startsWith('clusterURL-')) {
            clusterURL = clusterURL.substring(11); // Remove 'clusterURL-' prefix
        }
        if (serviceID && serviceID.startsWith('serviceID-')) {
            serviceID = serviceID.substring(10); // Remove 'serviceID-' prefix
        }
        if (servicePassword && servicePassword.startsWith('servicePassword-')) {
            servicePassword = servicePassword.substring(17); // Remove 'servicePassword-' prefix
        }

        // Debug: Log the raw input for troubleshooting
        console.log('Raw template tool input:', JSON.stringify(params));

        // Simple response with the cleaned parameters
        const result = `
## Template Processing Complete

**Raw Input Received:**
\`\`\`json
${JSON.stringify(params, null, 2)}
\`\`\`

**Cleaned Parameters:**
- **AIT**: ${ait}
- **SPK**: ${spk}
- **Repository**: ${repo}
- **Application Name**: ${applicationName}
- **Project Name**: ${projectName}
- **Cluster URL**: ${clusterURL}
- **Service ID**: ${serviceID}
- **Service Password**: ${servicePassword ? '***' : 'Not provided'}

**Response:**
Here are the parameters you provided:
- AIT: ${ait}
- SPK: ${spk}
- Repository: ${repo}
- Application Name: ${applicationName}
- Project Name: ${projectName}
- Cluster URL: ${clusterURL}
- Service ID: ${serviceID}
- Service Password: ${servicePassword ? '***' : 'Not provided'}

The template tool has successfully processed your request.
        `;

        return new vscode.LanguageModelToolResult([
            new vscode.LanguageModelTextPart(result)
        ]);
    }
}

// Dynamic Template Tool
class DynamicTemplateTool implements vscode.LanguageModelTool<IDynamicTemplateToolParameters> {
    async prepareInvocation(
        options: vscode.LanguageModelToolInvocationPrepareOptions<IDynamicTemplateToolParameters>,
        _token: vscode.CancellationToken
    ) {
        const confirmationMessages = {
            title: 'Process Dynamic Template Request',
            message: new vscode.MarkdownString(
                `Process dynamic template with input dialogs?\n\n` +
                `The tool will prompt you for each required parameter:\n` +
                `- AIT\n` +
                `- SPK\n` +
                `- Repository\n` +
                `- Application Name\n` +
                `- Project Name\n` +
                `- Cluster URL\n` +
                `- Service ID\n` +
                `- Service Password`
            ),
        };

        return {
            invocationMessage: `Processing dynamic template with input dialogs`,
            confirmationMessages,
        };
    }

    async invoke(
        options: vscode.LanguageModelToolInvocationOptions<IDynamicTemplateToolParameters>,
        _token: vscode.CancellationToken
    ): Promise<vscode.LanguageModelToolResult> {
        // Log the input for debugging
        console.log('Dynamic template tool invoked with input:', JSON.stringify(options.input));
        
        // Show input dialogs to get user input for each parameter
        const aitInput = await vscode.window.showInputBox({
            prompt: 'Enter AIT parameter',
            placeHolder: 'Enter AIT value...',
            validateInput: (value) => {
                if (!value || value.trim() === '') {
                    return 'AIT parameter is required';
                }
                return null;
            }
        });

        if (!aitInput) {
            return new vscode.LanguageModelToolResult([
                new vscode.LanguageModelTextPart('❌ AIT parameter is required. Dynamic template processing cancelled.')
            ]);
        }

        const spkInput = await vscode.window.showInputBox({
            prompt: 'Enter SPK parameter',
            placeHolder: 'Enter SPK value...',
            validateInput: (value) => {
                if (!value || value.trim() === '') {
                    return 'SPK parameter is required';
                }
                return null;
            }
        });

        if (!spkInput) {
            return new vscode.LanguageModelToolResult([
                new vscode.LanguageModelTextPart('❌ SPK parameter is required. Dynamic template processing cancelled.')
            ]);
        }

        const repoInput = await vscode.window.showInputBox({
            prompt: 'Enter Repository Name',
            placeHolder: 'Enter repository name...',
            validateInput: (value) => {
                if (!value || value.trim() === '') {
                    return 'Repository name is required';
                }
                return null;
            }
        });

        if (!repoInput) {
            return new vscode.LanguageModelToolResult([
                new vscode.LanguageModelTextPart('❌ Repository name is required. Dynamic template processing cancelled.')
            ]);
        }

        const applicationNameInput = await vscode.window.showInputBox({
            prompt: 'Enter Application Name',
            placeHolder: 'Enter application name...',
            validateInput: (value) => {
                if (!value || value.trim() === '') {
                    return 'Application name is required';
                }
                return null;
            }
        });

        if (!applicationNameInput) {
            return new vscode.LanguageModelToolResult([
                new vscode.LanguageModelTextPart('❌ Application name is required. Dynamic template processing cancelled.')
            ]);
        }

        const projectNameInput = await vscode.window.showInputBox({
            prompt: 'Enter Project Name',
            placeHolder: 'Enter project name...',
            validateInput: (value) => {
                if (!value || value.trim() === '') {
                    return 'Project name is required';
                }
                return null;
            }
        });

        if (!projectNameInput) {
            return new vscode.LanguageModelToolResult([
                new vscode.LanguageModelTextPart('❌ Project name is required. Dynamic template processing cancelled.')
            ]);
        }

        const clusterURLInput = await vscode.window.showInputBox({
            prompt: 'Enter Cluster URL',
            placeHolder: 'Enter cluster URL...',
            validateInput: (value) => {
                if (!value || value.trim() === '') {
                    return 'Cluster URL is required';
                }
                return null;
            }
        });

        if (!clusterURLInput) {
            return new vscode.LanguageModelToolResult([
                new vscode.LanguageModelTextPart('❌ Cluster URL is required. Dynamic template processing cancelled.')
            ]);
        }

        const serviceIDInput = await vscode.window.showInputBox({
            prompt: 'Enter Service ID',
            placeHolder: 'Enter service ID...',
            validateInput: (value) => {
                if (!value || value.trim() === '') {
                    return 'Service ID is required';
                }
                return null;
            }
        });

        if (!serviceIDInput) {
            return new vscode.LanguageModelToolResult([
                new vscode.LanguageModelTextPart('❌ Service ID is required. Dynamic template processing cancelled.')
            ]);
        }

        const servicePasswordInput = await vscode.window.showInputBox({
            prompt: 'Enter Service Password',
            placeHolder: 'Enter service password...',
            password: true, // Hide the password input
            validateInput: (value) => {
                if (!value || value.trim() === '') {
                    return 'Service password is required';
                }
                return null;
            }
        });

        if (!servicePasswordInput) {
            return new vscode.LanguageModelToolResult([
                new vscode.LanguageModelTextPart('❌ Service password is required. Dynamic template processing cancelled.')
            ]);
        }

        // Response with the collected parameters
        const result = `
## Dynamic Template Processing Complete

**Parameters Collected:**
- **AIT**: ${aitInput}
- **SPK**: ${spkInput}
- **Repository**: ${repoInput}
- **Application Name**: ${applicationNameInput}
- **Project Name**: ${projectNameInput}
- **Cluster URL**: ${clusterURLInput}
- **Service ID**: ${serviceIDInput}
- **Service Password**: ***

**Response:**
Here are the parameters you provided:
- AIT: ${aitInput}
- SPK: ${spkInput}
- Repository: ${repoInput}
- Application Name: ${applicationNameInput}
- Project Name: ${projectNameInput}
- Cluster URL: ${clusterURLInput}
- Service ID: ${serviceIDInput}
- Service Password: ***

The dynamic template tool has successfully processed your request.
        `;

        return new vscode.LanguageModelToolResult([
            new vscode.LanguageModelTextPart(result)
        ]);
    }
}

export function activate(context: vscode.ExtensionContext) {
    // Register the template tool
    context.subscriptions.push(
        vscode.lm.registerTool('workspace-analyzer_template', new TemplateTool())
    );

    // Register the dynamic template tool
    context.subscriptions.push(
        vscode.lm.registerTool('workspace-analyzer_dynamic-template', new DynamicTemplateTool())
    );

    console.log('Template Tools activated');
    console.log('Template tool registered: workspace-analyzer_template');
    console.log('Dynamic template tool registered: workspace-analyzer_dynamic-template');
}

export function deactivate() {
    console.log('Workspace Analyzer Language Model Tools deactivated');
} 